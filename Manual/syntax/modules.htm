<link rel="Stylesheet" href="../style.css" />
    <h3>Modules</h3>
   <p>In TASM, labels that start with the current local label (which defaults to <tt class="code">_</tt> underscore) are only directly accessible by name within the current module. For example:</p>
        <pre class="code">_moduleless: .equ 3

.module Renderer

render:
    ld b, 64
_loop:
    ld a, b
    call render_row
    djnz _loop
    ret
    
.module AI

update_monsters:
    ld b, 32
_loop:
    ld a, b
    call update_single_monster
    djnz _loop
    ret</pre>
        <p>The <tt class="code">_loop</tt> labels are not confused because they are only declared in the local module's scope thanks to the leading underscore. They are, in fact, treated as <tt class="code">Renderer._loop</tt> and <tt class="code">AI._loop</tt> - so if I wanted to be very strange and jump into the rendering loop from my AI loop I could change the <tt>djnz</tt> instruction to <tt class="code">djnz Renderer._loop</tt>. A label defined outside a module is accessible via <tt class="code">noname</tt> - so in the above, I have <tt class="code">noname._moduleless</tt>.</p>
        
        <p>Brass extends the module idea significantly. Rather than a simple bunch of root-level modules, Brass allows you to nest modules inside eachother. This functionality cannot be added transparently as it would break TASM-style modules, so you need to specify <tt class="code">.nestmodules</tt> before you can use these modules.</p>
<p>The directive <tt class="code">.local</tt> forces all subsequent labels to be local to their module. The directive <tt class="code">.global</tt> forces them to the global scope, and takes priority over any local label settings (the two directives are <i>not</i> direct opposites).</p>
<pre class="code">.nestmodules
.local
.module Animals

    .module Cat
        Legs = 4
    .endmodule

    .echo "Humans have ", Human.Legs, " legs.\n"

    .module Human
        Legs = 2
        .module Brother
            Age = 17
            .echo "My sister is ", Animals.Human.Sister.Age, " years old.\n"
        .endmodule
        .module Sister
            Age = 21
            .global
                Arms = 2
            .endglobal
        .endmodule
    .endmodule

    .module Spider
        Legs = 8
        .echo "A spider has ", Legs, " legs.\n"
    .endmodule

.endmodule

.echo "Cats have ", Animals.Cat.Legs, " legs.\n"
.echo "My brother is ", Animals.Human.Brother.Age, " years old.\n"
.echo "My sister has ", Arms, " arms (global!)\n"</pre>
    <p>Note how <i>Arms</i> is globally accessible, even though it is declared deep in the module <tt class="code">Animals.Human.Sister</tt>.</p>

    <p>There are four keywords you can use to reduce ambiguity when using a range of labels to explicitely declare which label you are referring to:</p>
    <table><tr><th>Keyword</th><th>Description</th></tr>
        <tr><td><tt>global</tt></td>    <td>Labels in the global scope.</td>  </tr>
        <tr><td><tt>root</tt></td>      <td>Labels in the root module.</td>   </tr>
        <tr><td><tt>parent</tt></td>    <td>Labels in the parent module.</td> </tr>
        <tr><td><tt>this</tt></td>      <td>Labels in the current module.</td></tr>
    </table>
    
    <p>For example:</p>
    <pre class="code">.local
.nestmodules

.global
    Label .equ 1
.endglobal

Label .equ 2

.module X

    Label .equ 3
    
    .module Y

        Label .equ 4
        
        .echoln "???:\t",    Label
        .echoln "Global:\t", Global.Label
        .echoln "Root:\t",   Root.Label
        .echoln "Parent:\t", Parent.Label
        .echoln "This:\t",   This.Label
        
    .endmodule

.endmodule

; Outputs:

; ???:    4
; Global: 1
; Root:   2
; Parent: 3
; This:   4</pre>