<link rel="Stylesheet" href="../style.css" />
<h3>Labels and Macros</h3>
    <p>Labels are variables that can be used by the expression parser. The first item on a line of text is assumed to be a label if it is either in the first column or if it cannot be assembled. The colon on the end of a label is entirely optional.</p>
     <p>Brass is a two-pass assembler. In the first pass, each line of the source file is read and parsed. Any label definitions are added to the label list, macros are parsed and each line is translated by the macro preprocessor. No object code is produced until the <i>second</i> pass.</p>
        <p>Due to this mode of operation, there are some important things to watch out for:</p>
        <ul>
        <li>Forward references with labels <i>are</i> allowed. For example,<pre class="code">    ld a,(_label)
; ...
_label: .db $FF</pre>...is perfectly valid as the address of <tt class="code">_label</tt> is calculated at the end of the first pass, and the code <tt class="code">ld a,(_label)</tt> isn't assembled until the second pass.</li>
        <li>Forward references with macros <i>are not</i> allowed. For example,<pre class="code">    add(1,2)
; ...
#define add(arg_a, arg_b) .db arg_a + arg_b</pre>...will not work. Remember that macros are just very primitive find-and-replace operations.</li></ul>
        <p>The assembler does clear/regenerate all macro definitions on each pass to prevent the following problem:</p>
        <pre class="code">.org $0000

#ifdef bad_macro
.db $FF
#else
.dw $FFFF
#endif

_label:

#define bad_macro</pre>
        <p>If the macros weren't cleared and regenerated, in the first pass <tt class="code">bad_macro</tt> would not have been defined and <tt class="code">_label</tt> would have had an address of <tt>$0002</tt>. In the second pass, <tt class="code">bad_macro</tt> <i>would</i> have been defined, and <tt class="code">_label</tt> would have had an address of <tt>$0001</tt>.</p>
        <p>The second pass does <i>not</i> perform any macro replacement, just redefinition. See the <a href="../directives/define.htm">.define</a> documentation for more in-depth information on macros.</p>