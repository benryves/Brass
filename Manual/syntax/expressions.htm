<link rel="Stylesheet" href="../style.css" />
        <h3>Expressions</h3>
      <p>Brass has a fairly stupid expression parser, and as to maintain backwards compatibility with TASM's even more stupid expression parser it is strongly recommended to leave no trace of ambiguity in your expressions and to wrap (parentheses) around <i>everything</i>. In example, TASM would calculate <tt>1+2*3+4*5</tt> as <tt>((((1+2)*3)+4)*5)</tt>, giving you 65. Brass, however, would calculate it as 27. Be <i>very</i> careful, and to make sure your expression is evaluated correctly type it in as <tt>1+(2*3)+(4*5)</tt>.</p>
    <p>Brass offers the following operators:</p>
    <table>
        <tr><th>Operator</th><th>Action</th><th>Example</th></tr>

        <tr><td><tt>+</tt></td><td>Addition</td><td><tt>4+5</tt> &rarr; <tt>9</tt></td></tr>
        <tr><td><tt>-</tt></td><td>Subtraction</td><td><tt>3-2</tt> &rarr; <tt>1</tt></td></tr>
        <tr><td><tt>*</tt></td><td>Multiplication</td><td><tt>5*2</tt> &rarr; <tt>10</tt></td></tr>
        <tr><td><tt>/</tt></td><td>Division</td><td><tt>16/2</tt> &rarr; <tt>8</tt></td></tr>
        <tr><td><tt>%</tt></td><td>Modulo</td><td><tt>3%2</tt> &rarr; <tt>1</tt></td></tr>

        <tr><td><tt>&amp;</tt></td><td>Bitwise <tt>AND</tt></td><td><tt>%1010&amp;%1100</tt> &rarr; <tt>%1000</tt></td></tr>
        <tr><td><tt>|</tt></td><td>Bitwise <tt>OR</tt></td><td><tt>%0011|%1001</tt> &rarr; <tt>%1011</tt></td></tr>
        <tr><td><tt>^</tt></td><td>Bitwise <tt>XOR</tt></td><td><tt>%1101^%0110</tt> &rarr; <tt>%1011</tt></td></tr>
        <tr><td><tt>!</tt></td><td>Boolean <tt>NOT</tt></td><td><tt>!0</tt> &rarr; <tt>1</tt></td></tr>
        <tr><td><tt>~</tt></td><td>Bitwise <tt>NOT</tt> (One's complement)</td><td><tt>~%1011</tt> &rarr; <tt>%0100</tt></td></tr>
        <tr><td><tt>&amp;&amp;</tt></td><td>Boolean <tt>AND</tt></td><td><tt>1&amp;&amp;1</tt> &rarr; <tt>1</tt></td></tr>
        <tr><td><tt>||</tt></td><td>Boolean <tt>OR</tt></td><td><tt>0||1</tt> &rarr; <tt>1</tt></td></tr>

        <tr><td><tt>&lt;&lt;</tt></td><td>Bitwise shift left</td><td><tt>%0011&lt;&lt;1</tt> &rarr; <tt>%0110</tt></td></tr>
        <tr><td><tt>&gt;&gt;</tt></td><td>Bitwise shift right</td><td><tt>%0100&gt;&gt;2</tt> &rarr; <tt>%0001</tt></td></tr>


        <tr><td><tt>&not;</tt></td><td>Two's complement (negate)</td><td><tt>5+&not;1</tt> &rarr; <tt>4</tt></td></tr>

        <tr><td><tt>==</tt></td><td>Equality</td><td><tt>54==(50+4)</tt> &rarr; <tt>1</tt></td></tr>
        <tr><td><tt>!=</tt></td><td>Inequality</td><td><tt>12!=(6*2)</tt> &rarr; <tt>0</tt></td></tr>
        <tr><td><tt>&lt;</tt></td><td>Less than</td><td><tt>4&lt;3</tt> &rarr; <tt>0</tt></td></tr>
        <tr><td><tt>&gt;</tt></td><td>Greater than</td><td><tt>35&gt;12</tt> &rarr; <tt>1</tt></td></tr>
        <tr><td><tt>&lt;=</tt></td><td>Less than or equal to</td><td><tt>32&lt;=(30+2)</tt> &rarr; <tt>1</tt></td></tr>
        <tr><td><tt>&gt;=</tt></td><td>Greater than or equal to</td><td><tt>'p'&gt;='q'</tt> &rarr; <tt>0</tt></td></tr>
        <tr><td><tt>?:</tt></td><td>Ternary</td><td><tt>0?(32+4):5</tt> &rarr; <tt>5</tt></td></tr>
        <tr><td><tt>$</tt></td><td>Instruction pointer</td><td><tt>$</tt> &rarr; <tt>$9D93</tt></td></tr>
        <tr><td><tt>#</tt></td><td>Current page</td><td><tt>#</tt> &rarr; <tt>0</tt></td></tr>

    </table>
    <p>Any boolean operators treat zero as false and any nonzero to be true.</p>
    <p>The ternary operator is a very useful one and can be used as an inline conditional. It takes this form:</p>
    <pre class="code">(boolean expression)?(returned if true):(returned if false)</pre>
    <p>If the expression returns true (nonzero) then the the value just after the <tt class="code">?</tt> is returned - if the expression returns false (zero) then the value after the <tt class="code">:</tt> is returned.</p>
      <p>Prefixing a label name with a <tt class="code">:</tt> colon returns the label's page number rather than address. For example:</p>
        <pre class="code">.page 0

    ld hl,function  ; hl = $F001
    ld a,:function  ; a = 4
    ld b,#          ; b = 0 (current page number)
    
.page 4
.org $F001
function:
    push ix
    call _do_something
    pop ix
    ret</pre>
    <p>Note that Brass uses double-precision values in a lot of the expressions (it will naturally use integer values for integer operations, chiefly the bitwise operations). You <i>must</i> use the decimal point "<tt class="code">.</tt>" regardless of how your machine is set up (the comma, for example, is used between arguments).</p>
    <p>You can "cast" values, however; for example:</p>
    <pre class="code">.echoln -1634.3        ; -1634.3
.echoln word(-1634.3)  ; -1634
.echoln uword(-1634.3) ; 63902
.echoln byte(-1634.3)  ; -98</pre>
    <p>As you can see from the last two, the value is adjusted or trucated (quite drastically in the case of the <tt>byte</tt>). Note that Brass doesn't really understand the concept of types - everything is stored as a <tt>double</tt>. This can get rather confusing if you start using the fixed point 'type', for example:</p>
    <pre class="code">.echoln fp8.8(2.00) ; 512
.echoln fp8.8(0.25) ; 64
.echoln fp4.4(1.40) ; 22</pre>
    <p>See the <a href="../directives/var.htm">.var</a> directive for more information on the different data types.</p>