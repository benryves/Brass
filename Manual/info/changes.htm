<link rel="Stylesheet" href="../style.css" />
<div id="changes">
			<h3>1.0.5.3</h3>
                <p><b>Bugfixes</b></p>
                    <p>Intel HEX and TI-83 Plus application output formats now generate the correct address when there are non-contiguous addresses (e.g. after <tt>.block</tt>).</p>
           <hr />

			<h3>1.0.5.2</h3>
                <p><b>Bugfixes</b></p>
                    <p><tt>.branch</tt> directive no longer aligns to 3-byte boundaries.</p>
           <hr />
		   
			<h3>1.0.5.1</h3>
                <p><b>Features</b></p>
                    <p><tt>defined()</tt> function allows you to check whether macros are defined without needing to nest/duplicate <tt>.ifdef</tt> directives.</p>
           <hr />
		   
			<h3>1.0.5.0</h3>
                <p><b>Features</b></p>
                    <p><tt>.appheaderpadding</tt> directive to change the application header padding (defaults to 128 bytes, allows you to reduce the size of the header and free up some space on the first page).</p>
           <hr />
		   
           <h3>1.0.4.11</h3>
                <p><b>Bugfixes</b></p>
                    <p>Warns you if the parser goes crazy.</p>
           <hr />

           <h3>1.0.4.0</h3>
                <p><b>Bugfixes</b></p>
                    <p>Intel hex mode now completely reworked - multipage TI applications now sign.</p>
                    <p><tt class="code"><a href="../directives/branch.htm">.branch</a></tt> directive fixed.</p>
                <p><b>Features</b></p>
                    <p><tt class="code"><a href="../directives/branchrule.htm">.branchrule</a></tt> directive added.</p>
                <p><b>Other</b></p>
                    <p>None of the other hex formats are currently available. I need to fix them!</p>
                    <p>Macro preprocesser sped up a fraction and made slightly less dim.</p>
                <p><b>Warning</b></p>
                    <p>The syntax of the <tt class="code"><a href="../directives/defpage.htm">.defpage</a></tt> directive has changed.</p>
           <hr />
                
                
           <h3>1.0.3.8</h3>
                <p><b>Bugfixes</b></p>
                    <p>Single-page applications now seem to sign correctly. Multiple paged applications still don't.</p>
                    <p>'Casting' to integral types truncates the value (<tt class="code">int(-4.3)</tt> returns -4 now).</p>
                <p><b>Features</b></p>
                    <p><tt class="code">asc</tt> type.</p>
           <hr />
                
           <h3>1.0.3.7</h3>
                <p><b>Bugfixes</b></p>
                    <p>Spaces in a page that are not written to are not exported in hex modes.</p>
                <p><b>Features</b></p>
                    <p>Applications now get automatically signed (assuming you have the TI SDK installed).</p>
                    <p><tt class="code"><a href="../directives/signkey.htm">.signkey</a></tt> directive.</p>
                    <p><tt class="code"><a href="../directives/appfield.htm">.appfield</a></tt> directive.</p>
                <p><b>Other</b></p>
                    <p>See the <a href="../tutorials/tiapps.htm">TI Applications</a> 'tutorial'.</p>
                <p><b>Warning</b></p>
                    <p>Application support is still wobbly, no small thanks to wildly conflicting information on the headers. Don't expect the signed applications to run on hardware (they appear to sometimes run on PTI, if you hold your breath, cross your fingers and hope).</p>
                
                    
           <hr />
           <h3>1.0.3.6</h3>
                <p><b>Bugfixes</b></p>
                    <p>Addresses no longer output as negative numbers in debug log.</p>
                    <p>Doesn't incorrectly complain over page origins any more.</p>
                    <p>Fixed <i>major</i> bugs in hex output.</p>
                <p><b>Features</b></p>
                    <p><tt class="code"><a href="../directives/tiarchived.htm">.tiarchived</a></tt> directive.</p>
                    <p><tt class="code"><a href="../directives/pvar.htm">.pvar</a></tt> directive.</p>
                <p><b>Other</b></p>
                    <p>Deprecated <tt class="code">.binaryrange</tt></p>
           <hr />
           <h3>1.0.3.5</h3>
                <p><b>Bugfixes</b></p>
                    <p>Sega part and version number now calculated correctly (I hope!) - many thanks to Maxim for pointing out the correct way to do it!</p>
                    <p>Fixes to 'type' system.</p>
                    <p>For-loops now can use floating-point.</p>
                <p><b>Features</b></p>
                    <p><tt class="code">.echoln</tt> directive to complement <tt class="code">.echo</tt></p>
                    <p>Array indexers.</p>
                    <p>TI-floating point variables.</p>           
           <hr />
           <h3>1.0.3.4</h3>
                <p><b>Features</b></p>
                    <p>Now uses floating point arithmetic pretty much everywhere.</p>
                    <p>Various different data types, including fixed-point support.</p>
                <p><b>Warning</b></p>
                    <p>Fairly major structural changes (and number handling) is likely to lead to erratic behaviour. Also note that you can only access the first element in an array of variables (no indexing support just yet).</p>
                <hr />
           
           <h3>1.0.3.3</h3>
                <p><b>Features</b></p>
                    <p>Full XML debug log support.</p>
                    <p>Description for breakpoints.</p>
                <hr />
           
            <h3>1.0.3.2</h3>
                <p><b>Bugfixes</b></p>
                    <p>Certain label and module names do not get mysteriously converted to lowercase in export files when not in case-sensitive mode (default).</p>
                    <p>In non-local (default) mode, labels added without the local label prefix no longer get added to the <tt class="code">noname</tt> module.</p>
                    <p>Filename and line number records no longer mysteriously lost in export files on variables.</p>
                <p><b>Features</b></p>
                    <p>NO$GMB and full assembly (exports page number as well) label file export.</p>
                    <p>Direct export of Emukon patch file support.</p>
                    <p><tt class="code">.breakpoint</tt> directive (for patch files).</p>
                    <p><tt class="code">.enum</tt> directive.</p>
                <hr />
           
            <h3>1.0.3.1</h3>
                <p><b>Features</b></p>
                    <p>'Intelligent' variable placement.</p>
                    <p>Structures.</p>
                <hr />

            <h3>1.0.3.0</h3>
                <p><b>Bugfixes</b></p>
                    <p><tt class="code">#define something (something)+something</tt> no longer treated as a macro with arguments (note the spaces).</p>
                    <p>Single-iteration <tt>.for</tt>/<tt>.repeat</tt> statements no longer go into an infinite loop.</p>
                    <p>Starting a program by redefining page 0 then continuing without issuing a <tt class="code">.page 0</tt> statement sticks output on a zombie page, resulting in a blank output. This has been fixed by explicitely rejoining page 0.</p>
                    
                <p><b>Features</b></p>
                    <p>Reworked label and module management, allowing for true distinction between global, unnamed and nested module labels. As this would break TASM's simplistic module system, you must manually enable these enhancements using the <tt class="code">.global</tt>, <tt class="code">.global</tt> and <tt class="code">.nestmodules</tt> directives.</p>
                    <p>Ability to <i>unsquish</i> output bytes (useful, for example, with TI-83 <tt>Send9(prgmXXXX)</tt> programs).</p>
                <p><b>Other</b></p>
                    <p>Broke TASM compatibility to fix weird behaviour with the <tt class="code">=</tt> 'directive'. You may not use the equals sign as part of a label name, now.</p>
        
            <hr />
            <h3>1.0.2.3</h3>
                <p><b>Bugfixes</b></p>
                    <p>Reworked line splitting and label definition rules; code such as <tt class="code">.for y,0,31\.for x,0,31\.if !(x&y)\.echo "##"\.else\.echo "  "\.endif\.loop\.echo "\n"\.loop</tt> will now assemble and run correctly. If you like that sort of thing (try it!).</p>
                <p><b>Features</b></p>
                    <p><tt class="code">.emptyfill</tt> (synonym for <tt class="code">.binaryfill</tt>).</p>
                    <p><tt class="code">.endasm</tt> and <tt class="code">.asm</tt> directives (multiline comments).</p>
                    <p><tt class="code">.repeat/.rept</tt> directives to repeat a block of code (cleaner than using a for-loop).</p>
                    <p><tt class="code">.deflong/.enddeflong</tt> for multiline macro defintions without having to resort to messy <tt class="code">.defcont</tt>.</p>
                    <p>Optional width and height parameters on <tt class="code">.incbmp</tt> directive.</p>
                    <p><tt class="code">.exportmode</tt> for setting export file options.</p>
                    <p>You can specify the page of a label along with the value in one go; also, label files can store a page number.</p>
                <p><b>Other</b></p>
                    <p>Labels can now be in any column - Brass should detect that a label is not assembly code and will not treat it as such. Assembly code itself must still sit at least one column in, though.</p>
            <hr />
            <h3>1.0.2.2</h3>
                <p><b>Bugfixes</b></p>
                    <p>Fixed warning on data overlap if last byte of file is overlapped (would only report the last overlap if the last byte was not overlapped).</p>
                    <p>If there are multiple errors on the same line (for example, in a loop) they will only be displayed once.</p>
                    <p><tt class="code">=</tt> can be used to redefine labels.</p>                    
                    <p><tt class="code">.equ</tt> without any arguments will no longer destroy the last label.</p>
                <p><b>Features</b></p>
                    <p><tt class="code">.align</tt> directive. I was getting fed up with typing <tt class="code">.org&nbsp;($&nbsp;+&nbsp;$FF)&nbsp;&&nbsp;$FF00</tt> every time.</p>
                    <p><tt class="code">&gt;</tt> symbol to allow you to neatly entab your source code.</p>                    
            <hr />        
            <h3>1.0.2.1</h3>
                <p><b>General</b></p>
                    <p>Large portions of the code rewritten to take advantage of C&#9839;2 features (chiefly generics). If you notice a feature has been broken, please inform me (my tests show nothing has been adversely affected).</p>
                <p><b>Bugfixes</b></p>
                    <p>Will no longer let you use <tt class="code">.var</tt> unless you have previously used <tt class="code">.varloc</tt></p>
                    <p>List file is faintly less useless.</p>
                <p><b>Features</b></p>
                    <p>Better control over exporting: use <tt class="code">.export</tt> (no arguments) and every label defined - be it normally, through <tt class="code">.equ</tt> or through <tt class="code">.var</tt> - is exported automatically.</p>
                    <p><tt class="code">.fail</tt>, <tt class="code">.warn</tt>, <tt class="code">.dbtan</tt> and <tt class="code">.dwtan</tt> directives.</p>
            <hr />
            <h3>1.0.2.0</h3>
                <p><b>General</b></p>
                    <p>I've rewritten the main assembler core from scratch to make it a bit more logical, the side effect is a tiny speed boost (from TASM being 6 times faster to being 4 times faster).</p>
                    <p>Now complains if you try to use the same label across two modules linked via <tt class="code">.using</tt>.</p>
                    <p><tt class="code">.inclabels</tt> directive speeds up assembling a shedload (as in, from ~1.5 seconds to 600ms!)</p>
                    <p>Warning if you use parentheses to denote an index where you shouldn't (try <tt class="code">ld d,(plotSScreen)</tt> now, Timendus).</p>
                    <p>Removed the manual from the EXE (that was just silly, though there was a genuine, albeit embarrassing, reason for that).</p>
                <hr />

            <h3>1.0.1.9</h3>

                <p><b>Features</b></p>
                    <p>Undefine macros through <tt class="code">.undef</tt>.</p>
                <hr />
            
            <h3>1.0.1.8</h3>
                <p><b>Features</b></p>
                    <p>Relocatable code modules.</p>
                <p><b>General</b></p>
                    <p>If no output filename is specified, and a <tt class="code">.binarymode</tt> directive is issued, the output filename now defaults to a sensible extension (eg .sms for <tt class="text">.binarymode SegaMS</tt>) rather than plain old .bin.</p>
                <hr />
            <h3>1.0.1.7</h3>
                <p><b>Features</b></p>
                    <p>Any externally referenced file is now loaded relative to the current source file, not the current working directory (which is still used as a fallback, should the file not be found elsewhere).</p>
                <hr />
            <h3>1.0.1.6</h3>
                <p><b>Features</b></p>
                    <p><tt class="code">rle</tt> flag on <tt class="code">.incbmp</tt> directive.</p>
                <p><b>General</b></p>
                    <p>TI variable names now default to the source code name, uppercased.</p>
                <hr />
            <h3>1.0.1.5</h3>
                <p><b>Features</b></p>
                    <p>Yet another reusable label (at the request of JoelS): <tt class="code">@</tt></p>
                <p><b>Bugfixes</b></p>
                    <p>PEBCAK-protection-scheme&trade; - both on expression parser and assembly-code handler. Previously, if you ignored part of an expression or piece of assembly (for example, <tt class="code">ld a,3+</tt> or <tt class="code">add a,</tt>) Brass's expression parser substituted in zeroes. It now displays an error in the first case, or a warning in the second. This was best demonstrated with the error <tt class="code">jp +</tt> instead of <tt class="code">jp {+}</tt>, which would in fact end up jumping to $0000. The problem is that index instructions expect an argument (<tt class="code">ld a,(ix+4)</tt>) but are commonly ignored (<tt class="code">ld a,(ix)</tt>) which causes Brass to display a warning, so I've added an (hard-coded) exception to ZIDX instructions, where the first argument is treated as optional.</p>
                <p><b>Other</b></p>
                    <p>The label generation/management code was <i>completely</i> rewritten. There are numerous side effect - reusable labels are now (more logically) accessed in <i>the order in which they are assembled</i>, not the total origin. You no longer need your whitespace (<tt class="code">_label:ld a,10</tt>). The expression parser was rewritten to accomodate this. With such fundamental and dangerous changes, be warned that the likelihood of fresh bugs is <i>far greater</i>, even though some known old bugs/hiccoughs have been remedied.</p>
            <hr />
            <h3>1.0.1.4</h3>
                <p><b>Bugfixes</b></p>
                    <p>Labels assigned via <tt class="code">=</tt> or <tt class="code">.equ</tt> are now recalculated on the second pass (for example in <tt class="code">.for</tt> loops).</p>
                <hr />
			<h3>1.0.1.3</h3>
                <p><b>Features</b></p>
                    <p><tt class="code">.using</tt> and <tt class="code">.endmodule</tt> directives for better module handling.</p>
                    <p><tt class="code">.varfree</tt> to return the end of the current variable table.</p>
			<p><b>Bugfixes</b></p>
                    <p><tt class="code">.defcont</tt> is no longer trimmed; multiline macros no longer have spaces/tabs for assembly code stripped.</p>
                    <hr />
       	   <h3>1.0.1.2</h3>
                <p><b>Features</b></p>
                    <p>Sega Master System and Game Gear export through standard Sega ROM header and SDSC tag writing.</p>
                    <p><tt class="code">.incbmp</tt> for quick-and-dirty bitmap inclusion.</p>
			<p>Integrated manual - just double click the EXE without any command-line parameters.</p>
			<p><b>Bugfixes</b></p>
                    <p>Page-related directives shouldn't crash; still not heavily tested so be wary.</p>
                    <hr />        
       	   <h3>1.0.1.1</h3>
                <p><b>Features</b></p>
                    <p>Multiple page binary output through <tt class="code">.defpage</tt> and <tt class="code">.page</tt> directives.</p>
                    <p>More binary output control through <tt class="code">.binaryrange</tt> and <tt class="code">.binaryfill</tt> directives.</p>
                <p><b>Bugfixes</b></p>
                    <p>Fixed ability to use escape sequences in character constants.</p>
                    <p>Parentheses matching on assembly code fixed; <tt class="code">ld a,(1&amp;2)^(3&amp;4)</tt>, for example, now correctly identifies as <tt class="code">ld a,*</tt> rather than <tt class="code">ld a,(*)</tt></p>
                    <hr />
    	   <h3>1.0.0.9</h3>
                <p><b>Bugfixes</b></p>
                    <p>Order of precedence bug fixed; bit-shift operators <tt>&lt;&lt;</tt> and <tt>&gt;&gt;</tt> work again.</p>
				<p><b>Features</b></p>
                    <p><tt class="code">.for</tt> and <tt class="code">.loop</tt> directives.</p>
                    <p>New label syntax; curly braces can be used to bung expressions into label names. For example, <tt>x=3 \_label_{x}:</tt> would create the label <tt>_label_3</tt>.</p>
                    <p><a href="#files">File operations</a>.</p>
                <hr />        
    	   <h3>1.0.0.8</h3>
                <p><b>Bugfixes</b></p>
                    <p>Error in macro preprocessor where definitions without arguments (such as <tt>.define SOMETHING</tt>) followed with a comment would define a macro that erased itself resolved.</p>
                <hr />
            <h3>1.0.0.7</h3>
                <p><b>Features</b></p>
                    <p>Completely rewritten macro preprocessor - fractionally faster (still slower than TASM, though) and comes with the ability to define macros with multiple replacement strings - when a macro is called, the closest matching replacement string is picked. See the <a href="#dirmacros">manual</a> for more information, or look at the <a href="macro_demo.asm">example file</a> to see it in action.</p>
                <p><b>Other</b></p>
                    <p>Multiple macros no longer go haywire (macros are not applied to macro definitions themselves, as a side-effect of the new macro preprocessor).</p>
                <hr />
            <h3>1.0.0.6</h3>
                <p><b>Features</b></p>
                    <p>New boolean logic operators for expressions: <tt>&amp;&amp;</tt>, <tt>||</tt>, <tt>!</tt> and the extremely useful ternary operator <tt>?:</tt>.</p>
                    <p>Included binary files (<tt>.incbin</tt>) can now have start and end indices to specify which bytes to include, and can have a expression applied to each byte as it is loaded.</p>
                <hr />
            <h3>1.0.0.5</h3>
                <p><b>Features</b></p>
                    <p>Integrated RLE compression of files loaded through <tt>.incbin</tt> if specified in a flag.</p>
                    <p>More output formats: Intel hex format, Intel hex word address format, MOS Technology hex format and Motorola hex format.</p>
                    <p>Sensible list file format, unlike the output from the <tt>-d</tt> switch.</p>
                <p><tt>RST</tt> no longer uses hard-coded tables, so allows you to use expressions in <tt>RST</tt> instructions (such as <tt>RST rMOV9TOOP1</tt>).</p>
                    <p>Output listing files using the <tt>-l &lt;filename&gt;</tt> switch.</p>
                    <p>Load external table files using the <tt>-t &lt;filename&gt;</tt> switch.</p>
                <hr />
            <h3>1.0.0.4</h3>
                <p><b>Features</b></p>
                    <p><a href="#data"><tt>.dbsin</tt> and <tt>.dbcos</tt></a> (plus word variations) to generate trigonometric tables.</p>
                     <p><b>Other</b></p>
                    <p>Warning on using ambiguous or confusing labels (eg <tt class="code">kX-1</tt> having the subtraction operator in the middle of it).</p>
                <hr />
            <h3>1.0.0.3</h3>
                <p><b>Bugfixes</b></p>
                    <p>Working binary output for TI85.</p>
                    <p>String unescape mechanism fixed with basic error check for 0-length strings when escaping double-backslashes.</p>
                <p><b>Features</b></p>
                    <p><a href="#dirlabels"><tt>.var</tt> and <tt>.varloc</tt></a> to help declaring labels to point to variables in safe RAM locations.</p>
                    <p><a href="#data"><tt>.asc</tt> and <tt>.asciimap</tt></a> to translate ASCII strings to whatever character encoding the Z80 devices uses.</p>
                    <p>Ability to pass data into source files through <a href="#environment">environment variables.</a></p>

                <hr />
            <h3>1.0.0.2</h3>
                <p><b>Bugfixes</b></p>
                    <p>Parser now safely splits lines up (could be thrown off if splitting argument lists up if the argument lists contained a character/string constant containing a comma - eg, <tt>.fill $10, ','</tt>).</p>
                <p><b>Features</b></p>
                    <p>Dummy port access instructions added (<tt>in (c)</tt>, <tt>in f,(c)</tt> and <tt>out (c),0</tt>). Jim e's <b>mode7</b> now assembles.</p>
                    <p>XML error log export for Latenite.</p>
                    <p>Optional strict error mode (stops assembling on the first major error).</p>
                    <p><tt>.dbrnd</tt> and <tt>.dwrnd</tt> directives.</p>
                    <p><u>Preliminary</u> support for binaries for the TI82 (working), TI73 (working), TI86 (needs you to specify <tt>.tivariabletype $12</tt> else it appears as a complex list), TI85 (totally buggered, doesn't work yet). As such, not mentioned in the manual. When I say <i>working</i>, I mean "I have checked in a hex editor", I do not own the calculators myself so cannot properly test.</p>
                <p><b>Other</b></p>
                    <p>Icon fixed for people using the 256-colour modes icon (no more white flecks around the edge).</p>
                    <hr />
            <h3>1.0.0.1</h3>
                <p><b>Bugfixes</b></p>
                    <p>Fixed typo; <tt>.binarymode</tt> was wrong, Brass expected <tt>.binarytype</tt>. Brass has been modified to accept <tt>.binarymode</tt> as that was what was in the documentation. <u>The real directive is now <tt>.binarymode</tt></u></p>
                    <p>Bugfix on expression parser; double negatives (such as 10--32 or 10*-4) were not being handled correctly. To save my brain from melting (this is the first time I've written software to parse expressions), I added a new operator, <tt>&not;</tt> to denote a negative number (eg <tt>&not;100</tt>). Double negatives are automatically converted (10--32 becomes <tt>10-&not;32</tt>) internally, so hopefully this is an invisible fix. The only problem is if you use <tt>&not;</tt> as a label name. As a side-effect, the <u>Al 3D Engine demo now assembles correctly, as does anything using Durk's GPP.</u></p>
                    <p>Label names no longer butchered in multiple-instruction lines.</p>
                    <p>Character constants that contain the symbol of an operator (eg <tt>'+'</tt> or <tt>'~'</tt>) are no longer treated as expressions (eg <tt>'&amp;'</tt> used to be treated as <tt>'</tt> AND-ed with <tt>'</tt>, causing a parse error).</p>
                    <p>Fixed other odd bug when defining a character constant as the first part of an instruction's argument - so <tt>ld a,'?'</tt> would work, but <tt>sub '?'</tt> would not. It had the side effect that comments weren't stripped correctly, so <tt>sub '?' ; Hmm</tt> would try to evaluate <tt>'?';Hmm</tt> as an expression.</p>
                    <p><i>Check <a href="#tested">manual</a> for latest compatibility list.</i></p>
                <p><b>Features</b></p>
                    <p><a href="#reusable">Reusable labels.</a></p>
                    <p>Warns you if you write to the same memory location in the output binary more than once. (<tt>.org 0 \ .db 0 \ .org 0 \ .db 0</tt>)</p>
                    <hr />
            <h3>1.0.0.0</h3>
                <p>First public release.</p>    </div>